@using StudentPortal.ViewModels
@model StudentPortal.ViewModels.Admin.DepartmentsViewModel
@{
    ViewData["Title"] = "Departments";
}

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Departments - Maxiversity</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background: linear-gradient(135deg, #eafaf1, #cce8d8);
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center justify-center">
    <div class="bg-white shadow-lg rounded-2xl p-8 w-full max-w-5xl flex flex-col items-center mt-12">
        <div class="w-full flex justify-between items-center mb-8">
            <div class="flex items-center gap-3">
                <h2 class="text-2xl font-semibold text-green-700">Departments</h2>
                <a href="/Admin/AddDepartment" title="Add new Department"
                   class="inline-flex items-center justify-center w-8 h-8 rounded-full bg-green-500 hover:bg-green-600 transition duration-200"
                   style="text-decoration: none;">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <title>Add new Department</title>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                </a>
            </div>
            <button type="button"
                    id="openImportModal"
                    class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md transition duration-200">
                Import Departments
            </button>
        </div>
        <div class="w-full overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Code</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Head</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Phone</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @if (Model.Department != null && Model.Department.Any())
                    {
                        @foreach (var t in Model.Department)
                        {
                            <tr class="hover:bg-green-50 cursor-pointer">
                                <td class="px-4 py-2">
                                    <a href="@Url.Action("DepartmentCard", "Admin", new { departmentCode = t.DepartmentCode })"
                                       class="text-green-700 hover:underline font-semibold">
                                        @t.DepartmentCode
                                    </a>
                                </td>
                                <td class="px-4 py-2">@t.DepartmentName</td>
                                <td class="px-4 py-2">@t.DepartmentHeadId</td>
                                <td class="px-4 py-2">@t.Phone</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="px-4 py-4 text-center text-gray-500">No time tables found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (Model.ImportResults != null && Model.ImportResults.Any())
        {
            <div class="mb-4 mt-6 w-full text-left">
                <h4 class="font-extrabold text-xl text-green-700">Import Results</h4>
                <ul>
                    @foreach (var result in Model.ImportResults)
                    {
                        <li class="@(result.IsSuccess ? "text-green-600" : "text-red-600")">
                            Row @(result.RowNumber - 1): @result.Message
                        </li>
                    }
                </ul>
            </div>
        }
    </div>

    <!-- Import Modal -->
    <div id="importModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden">
        <div class="bg-white rounded-lg shadow-lg p-8 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-green-700">Import Departments</h3>
                <button type="button" id="closeImportModal" class="text-gray-400 hover:text-gray-600 text-2xl leading-none">&times;</button>
            </div>
            <form action="/Admin/ImportDepartments" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="mb-4">
                    <label for="ExcelFile" class="block text-sm font-medium text-gray-700 mb-2">Select Excel file</label>
                    <input type="file" name="ExcelFile" id="ExcelFile" accept=".xlsx,.xls"
                           class="block w-full text-sm text-gray-700 border border-gray-300 rounded-md p-2" required />
                </div>
                <div class="flex justify-end gap-2">
                    <button type="button" id="cancelImport" class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-md">Cancel</button>
                    <button type="submit" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md">Import</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        const openBtn = document.getElementById('openImportModal');
        const closeBtn = document.getElementById('closeImportModal');
        const cancelBtn = document.getElementById('cancelImport');
        const modal = document.getElementById('importModal');

        openBtn.addEventListener('click', () => modal.classList.remove('hidden'));
        closeBtn.addEventListener('click', () => modal.classList.add('hidden'));
        cancelBtn.addEventListener('click', () => modal.classList.add('hidden'));
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.classList.add('hidden');
        });
    </script>
</body>

<style>
    body {
        background: linear-gradient(135deg, #d6f5e5, #a8dbc1);
    }
</style>
